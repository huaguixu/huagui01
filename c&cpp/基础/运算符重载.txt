//运算符重载
//加号运算符重载
#include<iostream>
using namespace std;
//对自定义数据类型进行运算
class person {
public:
	int m_a;
	int m_b;
	/*person operator+(person& p) {
		person temp;
		temp.m_a = this->m_a + p.m_a;
		temp.m_b= this->m_b + p.m_b;
	}*/
};
//全局函数重载
person operator+ (person& p1, person& p2) {
	person temp;
	temp.m_a = p1.m_a + p2.m_a;
	temp.m_b = p1.m_b + p2.m_b;
	return temp;
}
void test01() {
	person p1, p2, p3;
	p1.m_a = 10;
	p1.m_b = 10;
	p2.m_a = 10;
	p2.m_b = 10;
	p3 = p1 + p2;
	cout << p3.m_a << endl;
	cout << p3.m_b << endl;
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
using namespace std;
//对自定义数据类型进行输出
class person {
	friend person operator+ (person& p1, person& p2);
	friend ostream& operator<<(ostream& cout, person& p);
public:
	person() {
		this->m_a = 10;
		this->m_b = 10;
	}
private:
	int m_a;
	int m_b;
};
 ostream&operator<<(ostream&cout,person&p) {
	 cout << p.m_a << p.m_b << endl;;
	 return cout;
}
void test01() {
	person p1;
	cout << p1 << endl;;
}
int main() {
	test01();
	system("pause");
	return 0;
}

//递增运算
#include<iostream>
using namespace std;
class myint{
	friend ostream& operator<<(ostream& cout, myint p);
public:
	myint(){
		m_a = 0;
	}
	myint& operator++() //前置递增
	{
		m_a++;
		return*this;
	}
	myint operator++(int) //占位参数重载  后置递增
	{
		myint temp;
		temp.m_a = this->m_a;
		m_a++;
		return temp;
	}
private:
	int m_a;
};
ostream& operator<<(ostream&cout,myint p) {
	cout << p.m_a << endl;
	return cout;
}
void test01(){
	myint mi;
	cout << ++mi << endl;
	cout << mi++ << endl;
	cout << mi << endl;
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
using namespace std;
#include<string>
//赋值运算符重载
class person {
public:
	person(int age) {
		m_age = new int(age);
	}
	int* m_age;
	~person() {
		if (m_age != NULL) {
			delete m_age;
			m_age = NULL;
		}
	}
	person& operator=(person&p1) {//链式编程
		if (m_age != NULL) {
			delete m_age;
			m_age = NULL;
		}
		m_age = new int(*p1.m_age);
		return *this;
	}
};
void test01() {
	person p1(18);
	person p2(20);
	person p3(30);
	p1 = p2 = p3;//赋值(连等）
	cout << *p1.m_age << endl;
}
int main() {
	test01();
	system("pause");
	return 0;
}

//关系运算符重载
#include<iostream>
using namespace std;
class person {
public:
	string m_name;
	int m_age;
	person(string name, int age) {
		m_name = name;
		m_age = age;
	}
	bool operator==(person& p) {
		if ((this->m_name == p.m_name) && (this->m_age == p.m_age)) {
			return true;
		}
		else return false;
	}
	bool operator!=(person& p) {
		if ((this->m_name == p.m_name) && (this->m_age == p.m_age)) {
			return false;
		}
		else return true;
	}
};
void test01() {
	person p1("tom", 18);
	person p2("tom", 18);

}
int main() {
	test01();
	system("pause");
	return 0;
}

//函数调用运算符重载(仿函数)
#include<iostream>
using namespace std;
class myprint {
public:
	string operator()(string test) {
		cout << test << endl;//语句不固定
		return test;
	}
	//仿函数非常灵活
};
void test01() {
	myprint p1;
	p1("hello world");
	//匿名函数对象
	 myprint()("hello world") ;
}
int main() {
	test01();
	system("pause");
	return 0;
}