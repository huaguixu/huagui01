//全局函数作为友元
#include<iostream>
using namespace std;
//const 
class building {
	friend void h(building& p);//可以访问private
public:
	string m_settingRoom;
	building() {
		m_settingRoom = "客厅";
		m_bedRoom = "卧室";
	}
private:
	string m_bedRoom;
};
 void h(building& p) {
	cout << p.m_settingRoom << endl;
	cout << p.m_bedRoom << endl;
}
void test01(){
	building p1;
	h(p1);
}
int main() {
	test01();
	system("pause");
	return 0;
}
//类作为友元
#include<iostream>
using namespace std;
class building {
	friend class good;//friend
public:
	string m_settingRoom;
	building();
private:
	string m_bedRoom;
};
class good {
public:
	building* Building;
	void visit();
	good();
};
 //类外实现成员函数
building::building() {
	m_settingRoom = "客厅";
	m_bedRoom = "卧室";
}
good::good()//good作用域内
 {
	Building = new building;
}
void good::visit() {
	cout << Building->m_settingRoom << endl;
	cout << Building->m_bedRoom << endl;
}
void test01() {
	good g;
	g.visit();
}
int main() {
	test01();
	system("pause");
	return 0;
}
//成员函数作为友元
#include<iostream>
using namespace std;
class building;
class good//good在building上
{
public:
	building* Building;
	void visit();//让visit可以访问building中私有成员
	void visit02();//不可访问;
	good();
};
class building {
	friend void good::visit();
public:
	string m_settingRoom;
	building();
private:
	string m_bedRoom;
};

 //类外实现成员函数
building::building() {
	m_settingRoom = "客厅";
	m_bedRoom = "卧室";
}
good::good() {
	Building = new building;
}
void good::visit() {
	cout << Building->m_settingRoom << endl;
	cout << Building->m_bedRoom << endl;
}
void good::visit02() {
	cout << Building->m_settingRoom << endl;
	//cout << Building->m_bedRoom << endl;
}
void test01() {
	good g;
	g.visit();
	g.visit02();
}
int main() {
	test01();
	system("pause");
	return 0;
}