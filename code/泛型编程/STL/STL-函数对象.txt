//函数对象的属性
#include<iostream>
using namespace std;
class myadd {
public:
	int operator()(int a1, int a2) {
		return a1 + a2;
	}
};
class myprint {
public:
	void operator()(string name) {
		cout << name << endl;
		count++;
	}
	int count=0;//仿函数可以用其他成员属性来记录自己的状态
	//这里用count记录仿函数调用的次数
};
void test01() {
	myadd my;
	int c=my(1, 2);
	cout << c << endl;
}
void test02() {
	myprint mp;
	mp("hello world");
	mp("hello world");
	mp("hello world");
	mp("hello world");
	cout << mp.count << endl;
}
//函数对象可以作为参数传递
void doprint(myprint&mp,string test) {
	mp(test);
}
void test03() {
	myprint myt;
	doprint(myt, "helloC++");
}
int main() {
	//函数对象-重载了函数调用操作符的类
	test01();
	test02();
	test03();
	system("pause");
	return 0;
}
//谓词
//仿函数 返回值为bool数据类型，称为谓词;
//一元谓词
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
class five {
public:
	bool operator()(int v) {
		return v > 5;
	}
};
void test01() {
	vector<int>v1;
	for (int i = 0; i < 10; i++) {
		v1.push_back(i);
	}
	//查找容器内有没有大于5的数据
	vector<int>::iterator it = find_if(v1.begin(), v1.end(), five());//five为谓词
	if (it == v1.end()) {

	}
	else cout << *it << endl;
}
int main() {
	//函数对象-重载了函数调用操作符的类
	test01();
	
	system("pause");
	return 0;
}

//谓词
//仿函数 返回值为bool数据类型，称为谓词;
//二元谓词
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
class five {
public:
	bool operator()(int v,int v2) {//两个参数的谓词称为二元谓词
		return v > v2;
	}
};
void print(vector<int>& v) {
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it <<" ";
	}
	cout << endl;
}
void test01() {
	vector<int>v1;
	v1.push_back(10);
	v1.push_back(50);
	v1.push_back(20);
	v1.push_back(40);
	v1.push_back(30);
	sort(v1.begin(), v1.end(),five());//函数中传入谓词
	print(v1);
}
int main() {
	//函数对象-重载了函数调用操作符的类
	test01();
	
	system("pause");
	return 0;
}

//谓词
//仿函数 返回值为bool数据类型，称为谓词;
//一元谓词
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
class five {
public:
	bool operator()(int v) {
		return v > 5;
	}
};
void test01() {
	vector<int>v1;
	for (int i = 0; i < 10; i++) {
		v1.push_back(i);
	}
	//查找容器内有没有大于5的数据
	vector<int>::iterator it = find_if(v1.begin(), v1.end(), five());//five为谓词
	if (it == v1.end()) {

	}
	else cout << *it << endl;
}
int main() {
	//函数对象-重载了函数调用操作符的类
	test01();
	
	system("pause");
	return 0;
}

//谓词
//仿函数 返回值为bool数据类型，称为谓词;
//二元谓词
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
class five {
public:
	bool operator()(int v,int v2) {//两个参数的谓词称为二元谓词
		return v > v2;
	}
};
void print(vector<int>& v) {
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it <<" ";
	}
	cout << endl;
}
void test01() {
	vector<int>v1;
	v1.push_back(10);
	v1.push_back(50);
	v1.push_back(20);
	v1.push_back(40);
	v1.push_back(30);
	sort(v1.begin(), v1.end(),five());//函数中传入谓词
	print(v1);
}
int main() {
	//函数对象-重载了函数调用操作符的类
	test01();
	
	system("pause");
	return 0;
}

//内建函数对象
#include<functional>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//算数仿函数
//negate 一元仿函数 取反
//plus 二元仿函数 加法运算
//minus 减法仿函数
//multipiles 乘法仿函数
// divides 除法仿函数
// modulus 取模仿函数
void print(vector<int>& v) {
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it <<" ";
	}
	cout << endl;
}
void test01() {
	negate<int>a;
	cout << a(50) << endl;;
}
void test02() {
	plus<int>b;
	cout << b(10, 20) << endl;
}
int main() {
	test01();
	test02();
	
	system("pause");
	return 0;
}

//内建函数对象
#include<functional>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//关系仿函数
// equal_to 等于
// not_equal_to 不等于
// greater_equal 大于等于
// less 小于
// less_equal 小于等于
// greater 大于
void print(vector<int>& v) {
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it <<" ";
	}
	cout << endl;
}
void test01() {
	vector<int>v1;
	v1.push_back(10);
	v1.push_back(50);
	v1.push_back(20);
	v1.push_back(40);
	v1.push_back(30);
	sort(v1.begin(), v1.end(), greater<int>());//用内建函数对象作为谓词
	print(v1);
}
int main() {
	test01();
	system("pause");
	return 0;
}

//内建函数对象
#include<functional>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//逻辑仿函数
//logical_or 逻辑或
//logical_not 逻辑非
//logical_and 逻辑且
void print(vector<bool>& v) {
	for (vector<bool>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it <<" ";
	}
	cout << endl;
}
void test01() {
	vector<bool>v1,v2;
	v1.push_back(true);
	v1.push_back(false);
	v1.push_back(true);
	v1.push_back(true);
	v1.push_back(false);
	logical_not<bool>a;
	print(v1);
	v2.resize(v1.size());
	//利用逻辑非 将容器v1取非 搬运到v2中
	transform(v1.begin(), v1.end(), v2.begin(),a);//未使用匿名对象
	print(v2);
}
int main() {
	test01();
	system("pause");
	return 0;
