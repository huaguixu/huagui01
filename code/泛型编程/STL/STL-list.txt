//list 链表
//数据域 和 指针域
//插入删除快 遍历慢  占用空间大
//STL提供的list链表是双向循环链表
#include<iostream>
#include<list>
using namespace std;
void print(const list<int>& v) {
	for (list<int>::const_iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << " ";
	}
	cout << endl;
}
void test01() {
	//list构造函数
	//默认构造
	list<int>l1;
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(30);
	l1.push_back(40);
	print(l1);
	//按区间构造
	list<int>l2(l1.begin(), l1.end());
	print(l2);
	//拷贝构造
	list<int>l3(l2);
	print(l2);;
	//几个几方式
	list<int>l4(10, 1000);
	print(l4);
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
#include<list>
using namespace std;
void print(const list<int>& v) {
	for (list<int>::const_iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << " ";
	}
	cout << endl;
}
void test01() {
	//list赋值和交换
	list<int>l1, l2, l3, l4;
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(30);
	l1.push_back(40);
	//等号赋值
	l2 = l1;
	print(l1);
	//assign赋值
	l3.assign(l1.begin(), l1.end());
	l4.assign(10, 100);

	l4.assign(10, 100);
	//交换
	l4.swap(l2);
}
int main() {
	test01();
	system("pause");
	return 0;


}

#include<iostream>
#include<list>
using namespace std;
void print(const list<int>& v) {
	for (list<int>::const_iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << " ";
	}
	cout << endl;
}
void test01() {
	//list 插入
	list<int>l1;
	//尾插法
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(30);
	//头插法
	l1.push_front(100);
	l1.push_front(80);
	if (!l1.empty()){cout << l1.size() << endl;
	print(l1);
	}
	//尾删
	l1.pop_back();
	//头删
	l1.pop_front();
	//insert插入
	list<int>::iterator it = l1.begin();
	l1.insert(++it, 20);//指定位置插入
	print(l1);
	//erase删除
	l1.erase(l1.begin());//指定位置删除
	//按区间删除
	l1.erase(it, l1.end());
	print(l1);
	//移除
	l1.push_back(10000);
	l1.remove(10000);//删除容器内所有匹配的值
	print(l1);
	//清空
	l1.clear();
	print(l1);
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
#include<list>
using namespace std;
void print(const list<int>& v) {
	for (list<int>::const_iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << " ";
	}
	cout << endl;
}
void test01() {
	//list 数据的存取
	list<int>l1;
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(30);
	l1.push_front(100);
	l1.push_front(80);
	//不是用连续的空间存储的 不支持随机访问
	//访问首尾元素
	cout << l1.front() << endl;
	cout << l1.back() << endl;
	//对迭代器支持++ -- 不支持+（-）n
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
#include<list>
using namespace std;
void print(const list<int>& v) {
	for (list<int>::const_iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << " ";
	}
	cout << endl;
}
void test01() {
	//list 反转和排序
	list<int>l1;
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(30);
	l1.push_front(100);
	l1.push_front(80);
	print(l1);
	//反转
	l1.reverse();
	print(l1);
	//排序
	l1.sort(greater<int>());//可用谓词改变排序规则
	//所有不支持随机访问迭代器的容器，不可以用标准算法
	print(l1);
}
int main() {
	test01();
	system("pause");
	return 0;
}