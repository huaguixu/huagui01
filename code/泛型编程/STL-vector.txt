//vector容器
//vector容器存放内置数据类型
//单端数组
#include<iostream>
#include<vector>
#include<algorithm>//对应第三种遍历 加入算法
using namespace std;
void myprint(int a) {
	cout << a <<endl;
}
void test01(){
	
	//创建一个vector容器
	vector<int>v;//相当与 int数组

	//向容器中插入数据 尾插法
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//通过迭代器访问容器内的数据
	vector<int>::iterator itBegin = v.begin();//起始迭代器 指向容器内第一个元素(相当于指针)
	vector<int>::iterator itEnd = v.end();//结束迭代器 指向容器内最后一个元素的下一个位置

	//第一种遍历方式
	while (itBegin != itEnd) {
		cout << *itBegin << endl;
		itBegin++;
	}

	//第二种遍历方式
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << endl;
	}

	//第三种遍历方式
	for_each(v.begin(), v.end(), myprint);//参数：起始迭代器,结束迭代器，函数名
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<vector>
#include<algorithm>
using namespace std;
class person {
public:
	person(string name,int age) {
		m_name = name;
		m_age = age;
	}
	string m_name;
	int m_age;
};
void test01() {

	//创建一个vector容器
	vector<person>v;//相当与 person数组

	person p1("a", 1);
	person p2("b", 2);
	person p3("c", 3);
	person p4("d", 4);
	person p5("e", 5);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);
	for (vector<person>::iterator it = v.begin(); it != v.end(); it++) {
		cout << it->m_name<<" " << it->m_age << endl;
		
	}
}
void test02(){


vector<person*>v;//相当与 person指针数组

person p1("a", 1);
person p2("b", 2);
person p3("c", 3);
person p4("d", 4);
person p5("e", 5);
v.push_back(&p1);
v.push_back(&p2);
v.push_back(&p3);
v.push_back(&p4);
v.push_back(&p5);
for (vector<person*>::iterator it = v.begin(); it != v.end(); it++) {
	cout << (**it).m_name << "-" << (**it).m_age << endl;
    }
}
int main() {
	test01();
	test02();
	system("pause");
	return 0;
}

#include<vector>
#include<algorithm>
using namespace std;

void test01() {

	//嵌套容器
	vector<vector<int>>v;//相当与 二维数组
	vector<int > v1;
	vector<int > v2;
	vector<int > v3;
	vector<int > v4;
	for (int i = 1; i < 5; i++) {
		v1.push_back(i + 1);
		v2.push_back(i + 2);
		v3.push_back(i + 3);
		v4.push_back(i + 4);
	}
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);
	for (vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++) {
		for (vector<int>::iterator io = (*it).begin(); io != (*it).end(); io++) {
			cout << *io << " ";
		}
	}
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//vector容器构造
void print(vector<int>&v) {
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << endl;
	}

}
void test01() {
	vector<int>v1;
	for (int i = 0; i < 10; i++) {
		v1.push_back(i);
	}
	print(v1);
	//将v1.begin()到v2.end();之间的数据插入
	vector<int>v2(v1.begin(), v1.end());
	print(v2);
	//插入10个100
	vector<int>v3(10, 100);
	print(v3);
	//拷贝构造
	vector<int>v4(v3);
	print(v4);
}
int main() {
	test01();
	system("pause");
	return 0;
}