//STL六大组件
//容器，算法，迭代器，仿函数，适配器，空间配置器2
//vector容器
//vector容器存放内置数据类型
#include<iostream>
#include<vector>
#include<algorithm>//对应第三种遍历 加入算法
using namespace std;
void myprint(int a) {
	cout << a <<endl;
}
void test01(){
	
	//创建一个vector容器
	vector<int>v;//相当与 int数组

	//向容器中插入数据 尾插法
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//通过迭代器访问容器内的数据
	vector<int>::iterator itBegin = v.begin();//起始迭代器 指向容器内第一个元素(相当于指针)
	vector<int>::iterator itEnd = v.end();//结束迭代器 指向容器内最后一个元素的下一个位置

	//第一种遍历方式
	while (itBegin != itEnd) {
		cout << *itBegin << endl;
		itBegin++;
	}

	//第二种遍历方式
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++) {
		cout << *it << endl;
	}

	//第三种遍历方式
	for_each(v.begin(), v.end(), myprint);//参数：起始迭代器,结束迭代器，函数名
}
int main() {
	test01();
	system("pause");
	return 0;
}

#include<vector>
#include<algorithm>
using namespace std;
class person {
public:
	person(string name,int age) {
		m_name = name;
		m_age = age;
	}
	string m_name;
	int m_age;
};
void test01() {

	//创建一个vector容器
	vector<person>v;//相当与 person数组

	person p1("a", 1);
	person p2("b", 2);
	person p3("c", 3);
	person p4("d", 4);
	person p5("e", 5);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);
	for (vector<person>::iterator it = v.begin(); it != v.end(); it++) {
		cout << it->m_name<<" " << it->m_age << endl;
		
	}
}
void test02(){


vector<person*>v;//相当与 person指针数组

person p1("a", 1);
person p2("b", 2);
person p3("c", 3);
person p4("d", 4);
person p5("e", 5);
v.push_back(&p1);
v.push_back(&p2);
v.push_back(&p3);
v.push_back(&p4);
v.push_back(&p5);
for (vector<person*>::iterator it = v.begin(); it != v.end(); it++) {
	cout << (**it).m_name << "-" << (**it).m_age << endl;
    }
}
int main() {
	test01();
	test02();
	system("pause");
	return 0;
}

#include<vector>
#include<algorithm>
using namespace std;

void test01() {

	//嵌套容器
	vector<vector<int>>v;//相当与 二维数组
	vector<int > v1;
	vector<int > v2;
	vector<int > v3;
	vector<int > v4;
	for (int i = 1; i < 5; i++) {
		v1.push_back(i + 1);
		v2.push_back(i + 2);
		v3.push_back(i + 3);
		v4.push_back(i + 4);
	}
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);
	for (vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++) {
		for (vector<int>::iterator io = (*it).begin(); io != (*it).end(); io++) {
			cout << *io << " ";
		}
	}
}
int main() {
	test01();
	system("pause");
	return 0;
}

//string容器(本质是一个类)
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
void test01() {
//string 构造函数
	string s1;//默认构造
	const char* str = " ";
	string s2(str);
	cout << s2 << endl;
	string s3(s2);//拷贝构造
	cout << s3<< endl;
	string s4(10, 'a');
	cout << s4 << endl;
 //赋值操作(等号赋值)
	string str1 = "hello";
	string str2;
	str2 = str1;
	string str3;
	str3= 'a';
//assign赋值
	string str4;
	str4.assign("hello");
	string str5,str6,str7;
	str5.assign("hello cpp", 5);
	str6.assign(str5);
	str7.assign(10, 'w');
//string的拼接
	string st = "h";
	st += "e";
	string st1 = "l";
	st += st1;
	st += 'l';
	st.append("o");//加入"o"
	string st2="w";
	st.append(" abcd", 1);//加入前n个字符
	st.append(st2);
	st.append("world", 1, 4);//从第二个字符开始截取，截取4个字符
	cout << st <<endl;
//字符串的查找和替换
//字符串的查找
	string stri1 = "abcdefgde";
	int pos = stri1.find("de");
	cout << pos << endl;//从0开始索引;
	//如果没找到 返回-1
	pos = stri1.rfind("de");//从右往左查
	cout << pos <<endl;
//字符串的替换
	stri1.replace(1, 3,"1111");//将1号位到3号位的字符串转换位指定的字符串
	cout << stri1 << endl;
//字符串的比较
	string strin1 = "hello";
	string strin2 = "hello";
	if (strin1 == strin2) {//==运算符重载
		cout << strin1 <<endl;
	}
	//2.compare函数
	int p=strin1.compare(strin2);//相等返回0，strin1>strin2返回1,strin1<strin2返回-1;
	cout << p << endl;
//字符存取
	string s_t1 = "hello";
	cout << s_t1 << endl;
	//访问单个字符
	for (int i = 0; i < s_t1.size(); i++) {//s_t1.size()长度；
		cout << s_t1[i];
	}
	cout << endl;
	for (int i = 0; i < s_t1.size(); i++) {
		cout << s_t1.at(i);
	}
	cout << endl;
	//修改单个字符
	s_t1[0] = 'x';
	cout << s_t1 << endl;
}
}
int main() {
	test01();
	system("pause");
	return 0;
}