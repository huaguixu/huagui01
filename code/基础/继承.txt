//继承
#include<iostream>
using namespace std;
class base {
public:
	void header() {
		cout << "首页、公开课、登录、注册" << endl;
	}
	void footer() {
		cout << "帮助中心、交流合作、站内地图" << endl;
	}
	void left() {
		cout << "java,python,c++" << endl;
	}
};
class java :public base//公共继承
{
public:
	void contain() {
		cout << "java学习视频" <<endl;
	}
};
class python:protected base//保护继承
{
public:
	void contain() {
		cout << "python学习视频" << endl;
	}
};
class cpp :private base//私有继承
{
public:
	void contain() {
		cout << "c++学习视频" << endl;
	}
};
void test01() {
	cout << "java页面如下" << endl;
	java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.contain();
	cout << "-------------------------------" << endl;
	cout << "java页面如下" << endl;
	python py;
	py.header();
	py.footer();
	py.left();
	py.contain();
	cout << "-------------------------------" << endl;
	cout << "java页面如下" << endl;
	cpp cp;
	cp.header();
	cp.footer();
	cp.left();
	cp.contain();
	cout << "-------------------------------" << endl;
}
int main() {
	test01();
	system("pause");
	return 0;
}

//继承
//继承的好处：减少重复代码
//语法：class子类：继承方式 父类
//子类 也称 派生类  
//父类 也称 基类
#include<iostream>
using namespace std;
class basic {
public:
	int m_a;
};
class base:virtual public basic
{
};
class base2:virtual public basic
{
public:
	static int m_c;
};
int m_c = 20;
class son: public base, public base2
{
public:
	static int m_b;
};
int m_b = 10;
void test01() {
	son s1;
	s1.base::m_a = 18;
	s1.base2::m_a = 28;
	//多继承 需要用作用域区分数据
	cout << s1.base2::m_a << endl;
	cout << s1.base::m_a << endl;
	cout << s1.m_a <<endl;//灵性继承可以用虚继承将两份数据变为一份
	cout << son::m_b <<son::base2::m_c<<endl;//静态数据可以用类名访问 不需要对象
}
int main() {
	test01();
	system("pause");
	return 0;
}