//多态
//一般多态指的是动态多态
//静态多态的函数早绑定
//动态多态的函数晚绑定
//动态多态使用条件：
//1.有继承关系
//2.子类要重写父类的虚函数
//动态多态的使用
//父类的指针或引用指向子类对象
#include<iostream>
using namespace std;
class animal {
public:
	virtual void speak()//虚函数地址晚绑定
	{
		cout << "傻逼" << endl;
	}	
};
class cat :public animal
{
public:
	//重写 函数返回值 函数名 参数列表 完全相同
	void speak() {
		cout << "喵喵喵" << endl;
	}
};
//地址早绑定，已经确定
//传什么都用animal
void dospeak(animal&Animal)//animal&Animal=c，父类接收子类对象，不需要强制类型转换
{
	Animal.speak();//传入谁用谁的地址
}
void test01() {
	cat c;
	dospeak(c);

}
int main() {
	test01();
	system("pause");
	return 0;
}

//多态
//开闭原则；对拓展开放，对修改封闭
//用多态写计算器 
#include<iostream>
using namespace std;
class calculator {
public:
	virtual int getres() {
		return 0;
	}
	int m_a;
	int m_b;
};
class add :public calculator {
public:
	int  getres() {
		
		return m_a+m_b;
	}
};
class sub :public calculator {
public:
	int  getres() {

		return m_a - m_b;
	}
};
class muti :public calculator {
public:
	int  getres() {

		return m_a * m_b;
	}
};
class mup :public calculator {
public:
	int  getres() {

		return m_a / m_b;
	}
};
void test02() {
	calculator* abc = new add;
	abc->m_a = 10;
	abc->m_b = 10;
	cout << abc->getres() << endl;
	delete abc;

	abc = new sub;
	abc->m_a = 10;
	abc->m_b = 10;
	cout << abc->getres() << endl;
	delete abc;
	abc = new muti;
	abc->m_a = 10;
	abc->m_b = 10;
	cout << abc->getres() << endl;
	delete abc;
	abc = new mup;
	abc->m_a = 10;
	abc->m_b = 10;
	cout << abc->getres() << endl;
	delete abc;
}
int main() {
	//test01();
	test02();
	system("pause");
	return 0;
}

#include<iostream>
using namespace std;
class animal {
public:
	animal() {
		cout << "构造函数的调用" <<endl;
	}
	virtual void speak() = 0;
	virtual~animal() = 0;//子类有对象开辟到堆区；需要虚析构或纯虚析构释放内存
};
animal::~animal() {
	cout << "纯虚析构函数的调用" << endl;
}
class cat :public animal
{
public:
	cat(string name) {
		cout << "构造函数" << endl;
		m_name = new string(name);
	}
	//重写 函数返回值 函数名 参数列表 完全相同
	void speak() {
		cout <<*m_name<< "喵喵喵" << endl;
	}
	string*m_name;
	~cat() {
		if (m_name != NULL) {
			cout << "析构函数" << endl;
			delete m_name;
			m_name = NULL;
		}
	}
};
void test01() {
	animal* an = new cat("tom");
	an->speak();
	delete an;//父类指针析构时不会调用子类中的析构函数，导致子类如果有堆区属性，会出现内存泄露
}
int main() {
	test01();
	system("pause");
	return 0;
}
